
import java.awt.BorderLayout;
import java.io.IOException;
import java.io.PrintWriter;
import java.net.Socket;
import java.net.UnknownHostException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Scanner;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author ceras
 */
public class PrivateDialog extends javax.swing.JDialog {
    private javax.swing.JLabel IDLabel;
    static int CLIENT_PORT = 2002;
    static int SERVER_PORT = 2001;
    String serverIP;

    /**
     * Creates new form PrivateDialog
     */
    public PrivateDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }
    
    public void getName(String id) {
        IDLabel = new javax.swing.JLabel();
        IDLabel.setFont(new java.awt.Font("Tahoma", 0, 19));
        IDLabel.setText(id);
        setLayout(new BorderLayout());
        IDLabel.setHorizontalAlignment(JLabel.CENTER);
        add(IDLabel, BorderLayout.NORTH);
    }
    
    public String formatDate(LocalDateTime d) {
        DateTimeFormatter formatDate = DateTimeFormatter.ofPattern("MM/dd/yyyy HH:mm");
        String formattedDate = d.format(formatDate);
        return formattedDate;
    }
    
    public void setIP(String ip) {
        serverIP = ip;
    }
    public String getIP() {
        return serverIP;
    }
    
    public void getRecipient(String recipient) {
        jLabel3.setText(recipient);
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Send Private Message");

        jLabel2.setText("Send to:");

        jButton1.setText("Send");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SendPrivate(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(110, 110, 110)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 118, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jTextField2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SendPrivate(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SendPrivate
        // TODO add your handling code here:
        String name = IDLabel.getText();
        String text = jTextField2.getText().trim();
        String recipient = jLabel3.getText();
        LocalDateTime sentDate = LocalDateTime.now();
        String date = this.formatDate(sentDate);
        if (text.equals("")) {
            JOptionPane.showMessageDialog(this, "Write a message");
        } else {
            try {
                String host = serverIP;
                Socket serverS = new Socket(host, SERVER_PORT);
                Scanner serverIn = new Scanner(serverS.getInputStream());
                PrintWriter serverOut = new PrintWriter(serverS.getOutputStream(), true);

                serverOut.println("SEND PRIVATE");
                System.out.println("Sent: SEND PRIVATE");
                String result = serverIn.nextLine();

                if (result.equals("Name?")) {
                    serverOut.println(name);
                    System.out.println("Sent: " + name);
                    result = serverIn.nextLine();
                    if (result.equals("Recipient?")) {
                        serverOut.println(recipient);
                        System.out.println("Sent: " + recipient);
                        result = serverIn.nextLine();
                    }
                    if (result.equals("Recipient offline")) {
                        JOptionPane.showMessageDialog(this, "Recipient is offline. Unable to send private message right now.");
                    } else {
                        serverIn.close();
                        serverS.close();
                        String rIP = result;
                        try {
                            Socket s = new Socket(rIP, CLIENT_PORT);
                            Scanner in = new Scanner(s.getInputStream());
                            PrintWriter out = new PrintWriter(s.getOutputStream(), true);

                            out.println("SEND PRIVATE");
                            System.out.println("Sent: SEND PRIVATE");
                            result = in.nextLine();
                            if (result.equals("Name?")) {
                                out.println(name);
                                System.out.println("Sent: " + name);
                                result = in.nextLine();
                                if (result.equals("Text?")) {
                                    out.println(text);
                                    System.out.println("Sent: " + text);
                                    result = in.nextLine();
                                }
                                if (result.equals("Date?")) {
                                    out.println(date);
                                    System.out.println("Sent: " + date);
                                    result = in.nextLine();
                                }
                                if (result.equals("Private sent")) {
                                    System.out.println(result);
                                    JOptionPane.showMessageDialog(this, "Private message sent");
                                    this.dispose();
                                }
                            } else {
                                System.out.println("Error in protocol");
                            }
                            in.close();
                            s.close();
                        }
                        catch (UnknownHostException e) {
                            System.err.println("Add Protocol: no such host");
                        }
                        catch (IOException e) {
                            System.err.println("IOEXCEPTION");
                            System.err.println(e.getMessage());
                        }
                    }
                }
                serverIn.close();
                serverS.close();
            }
            catch (UnknownHostException e) {
                System.err.println("Add Protocol: no such host");
            }
            catch (IOException e) {
                System.err.println("IOEXCEPTION");
                System.err.println(e.getMessage());
            }
        }
    }//GEN-LAST:event_SendPrivate

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PrivateDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PrivateDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PrivateDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PrivateDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                PrivateDialog dialog = new PrivateDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
